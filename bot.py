import time
import os
import re
import pandas as pd
from bs4 import BeautifulSoup
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import ElementClickInterceptedException, TimeoutException
from webdriver_manager.chrome import ChromeDriverManager
from selenium.common.exceptions import StaleElementReferenceException, TimeoutException


# === 1. Lecture du fichier Excel ===
fichier_excel = "excel/DATA_MIG.xlsx"

if not os.path.exists(fichier_excel):
    print(f"‚ùå Fichier introuvable : {fichier_excel}")
    exit()

df = pd.read_excel(fichier_excel)

# --- Infos de connexion ---
lien_prod = df.iloc[0, 0]
username = df.iloc[0, 2]
password = df.iloc[0, 3]

print(f"Lien: {lien_prod}\nUser: {username}\nPass: {password}")

# === 2. Configuration Chrome (profil temporaire) ===
chrome_options = Options()
chrome_options.add_argument("--start-maximized")
chrome_options.add_argument("--disable-blink-features=AutomationControlled")
chrome_options.add_argument("--no-sandbox")
chrome_options.add_argument("--disable-gpu")
chrome_options.add_argument("--disable-dev-shm-usage")
chrome_options.add_argument("--remote-debugging-port=9222")
chrome_options.add_argument("--ignore-certificate-errors")

# üëâ Cr√©ation d‚Äôun profil temporaire
profil_temp = os.path.join(os.getcwd(), "chrome_temp_profile")
if not os.path.exists(profil_temp):
    os.makedirs(profil_temp)
chrome_options.add_argument(f"--user-data-dir={profil_temp}")

# === 3. Lancement du navigateur ===
try:
    driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()), options=chrome_options)
    print("‚úÖ Chrome lanc√© avec succ√®s")
except Exception as e:
    print("‚ùå Erreur lors du lancement de Chrome :", e)
    exit()

# === 4. Connexion IFS ===
driver.get(lien_prod)

try:
    WebDriverWait(driver, 15).until(
        EC.element_to_be_clickable((By.XPATH, '//div[text()="Open IFS Cloud"]'))
    ).click()
    print("‚úÖ Clic sur 'Open IFS Cloud' r√©ussi")
except TimeoutException:
    print("‚ö†Ô∏è Bouton 'Open IFS Cloud' non trouv√© ‚Äî peut-√™tre d√©j√† connect√©.")

# --- Connexion ---
try:
    WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.ID, "username")))
    driver.find_element(By.ID, "username").send_keys(username)
    driver.find_element(By.ID, "password").send_keys(password)
    driver.find_element(By.ID, "id-ifs-login-btn").click()
    print("‚úÖ Connexion r√©ussie")
except Exception:
    print("‚ÑπÔ∏è D√©j√† connect√© ou interface diff√©rente.")

# === 5. Lecture des ordres ===
df_orders = pd.read_excel(fichier_excel, skiprows=3)
df_orders["View d√©tect√©"] = None

# === 6. Ex√©cution du premier lien ===
first_link = df_orders.iloc[0]["Lien"]
print(f"\n‚û°Ô∏è Acc√®s au premier lien : {first_link}")
driver.get(first_link)

try:
    # Attente du chargement complet
    WebDriverWait(driver, 30).until_not(
        EC.presence_of_element_located((By.CSS_SELECTOR, ".spinner-wrapper"))
    )
    print("‚úÖ Page du premier lien charg√©e avec succ√®s")

    # --- Clic sur les initiales ---
    try:
        initials_btn = WebDriverWait(driver, 15).until(
            EC.element_to_be_clickable((By.CSS_SELECTOR, "div.initials"))
        )
        initials_btn.click()
        print("‚úÖ Clic sur le bouton 'initiales' r√©ussi")
    except ElementClickInterceptedException:
        print("‚è≥ Attente que le spinner disparaisse avant de cliquer...")
        WebDriverWait(driver, 15).until_not(
            EC.presence_of_element_located((By.CSS_SELECTOR, ".spinner-wrapper"))
        )
        initials_btn = driver.find_element(By.CSS_SELECTOR, "div.initials")
        initials_btn.click()
        print("‚úÖ Clic sur le bouton 'initiales' r√©ussi apr√®s attente")

    # --- Clic sur 'Debug' ---
    debug_btn = WebDriverWait(driver, 10).until(
        EC.element_to_be_clickable((By.XPATH, "//button[contains(.,'Debug')]"))
    )
    debug_btn.click()
    print("‚úÖ Clic sur 'Debug' r√©ussi")

    # --- Clic sur 'Page info' ---
    page_info_btn = WebDriverWait(driver, 10).until(
        EC.element_to_be_clickable((By.XPATH, "//button[contains(.,'Page info')]"))
    )
    page_info_btn.click()
    print("‚úÖ Clic sur 'Page info' r√©ussi")

    # --- Extraction du View ---
    time.sleep(3)
    soup = BeautifulSoup(driver.page_source, "html.parser")
    markdown_div = soup.find("div", {"class": "markdown-text"})

    if markdown_div:
        text_content = markdown_div.get_text(separator=" ").replace("\n", " ")
        all_views = re.findall(r"View\s*:\s*([A-Za-z0-9_]+)", text_content)

        if all_views:
            first_view = all_views[0].strip()
            print(f"üîç View d√©tect√© : {first_view}")
            df_orders.loc[0, "View d√©tect√©"] = first_view
        else:
            print("‚ö†Ô∏è Aucun View trouv√©. V√©rifie le format de la page info.")
            print("Extrait :", text_content[:300])
    else:
        print("‚ùå Section 'markdown-text' introuvable ‚Äî v√©rifie la structure HTML.")

except Exception as e:
    print("‚ùå Erreur pendant la r√©cup√©ration du View:", e)

# === 7. Sauvegarde interm√©diaire ===
result_path = "excel/DATA_MIG_result.xlsx"
df_orders.to_excel(result_path, index=False)
print(f"üíæ R√©sultat sauvegard√© dans {result_path}")

# === 8. Acc√®s √† la page MigrationJob ===
if 'first_view' in locals() and first_view:
    base_url = lien_prod.split("/landing-page")[0]

    migration_path = (
        "/main/ifsapplications/web/page/MigrationJob/Form;"
        "path=0.1656053651.381724595.1872552273.1473091230;"
    )

    migration_url = base_url + migration_path
    driver.get(migration_url)
    print(f"‚û°Ô∏è Acc√®s √† la page MigrationJob : {migration_url}")

    try:
        WebDriverWait(driver, 30).until_not(
            EC.presence_of_element_located((By.CSS_SELECTOR, ".spinner-wrapper"))
        )
        print("‚úÖ Page MigrationJob charg√©e avec succ√®s")
        time.sleep(5)
        try:
            retry_count = 0
            new_btn = None
            while retry_count < 3:
                try:
                    new_btn = WebDriverWait(driver, 10).until(
                        EC.element_to_be_clickable((By.XPATH, "//button[@title='New']"))
                    )
                    new_btn.click()
                    print("‚úÖ Clic sur le bouton 'New' r√©ussi")
                    break  # sortie de la boucle si r√©ussi
                except StaleElementReferenceException:
                    print("‚ö†Ô∏è √âl√©ment devenu obsol√®te, tentative de relocalisation...")
                    retry_count += 1
                    time.sleep(1)
            if retry_count == 3:
                print("‚ùå Impossible de cliquer sur 'New' apr√®s 3 tentatives")
        except TimeoutException:
            print("‚ö†Ô∏è Bouton 'New' introuvable ou non cliquable")
    except TimeoutException:
        print("‚ö†Ô∏è La page MigrationJob n'a pas fini de charger.")
else:
    print("‚ö†Ô∏è Impossible de g√©n√©rer l'URL MigrationJob ‚Äî View non d√©tect√©.")
# === 9. Fin du script ===
driver.quit()
print("üéâ Script termin√© avec succ√®s.")
